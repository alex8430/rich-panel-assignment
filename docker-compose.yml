version: '3.9'

services:
  app:
    # This defines the configuration options, including the context and dockerfile,
    # that will be applied when Compose builds the application image.
    build:
      # This defines the build context for the image build — in this case, the current project directory.
      context: .
      # This specifies the Dockerfile in your current project directory as the file
      dockerfile: Dockerfile
    image: app
    container_name: app
    # This defines the restart policy. The default is no,
    # but we have set the container to restart unless it is stopped.
    restart: unless-stopped
    env_file: .env
    ports:
      # This maps port from .env on the host to same port number on the container.
      - '$PORT:$PORT'
      - '9229:9229' # Expose the debugger port
    links:
      - psql
      - redis
    depends_on:
      - psql
      - redis
    networks:
      - rich-panel-network

  psql:
    image: postgres:14.1-alpine
    restart: always
    env_file:
      - .env
    environment:
      - POSTGRES_USER=$DB_USER
      - POSTGRES_PASSWORD=$DB_USER_PWD
      - POSTGRES_DB=$DB_NAME
    ports:
      - '5433:5432'
    volumes:
      - ./psql_db:/var/lib/postgresql/data
    networks:
      - rich-panel-network

  redis:
    image: redis:7.2.3
    container_name: redis
    restart: unless-stopped
    env_file: .env
    ports:
      - '$REDIS_PORT:6379'
    command: redis-server --save 20 1 --loglevel warning --requirepass $REDIS_PASSWORD
    volumes:
      - cache:/data/cache
    networks:
      - rich-panel-network

# Our top-level volumes key defines the volumes dbdata.
# When Docker creates volumes, the contents of the volume are stored in a part of the host filesystem, /var/lib/docker/volumes/, that’s managed by Docker.
# The contents of each volume are stored in a directory under /var/lib/docker/volumes/ and get mounted to any container that uses the volume.
# In this way, the data that our users will create will persist in the dbdata volume even if we remove and recreate the db container.
volumes:
  dbdata:
  cache:
    driver: local

networks:
  rich-panel-network:
    driver: bridge
